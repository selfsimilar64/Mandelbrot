<resources xmlns:tools="http://schemas.android.com/tools">
    <string name="app_name">Fractal Eye</string>
    <string name="title_activity_settings">Settings</string>




    <!-- LAYOUT -->
    <!-- ===================================================================================== -->
    <string name="tab_fractal">fractal</string>
    <string name="tab_settings">settings</string>
    <string name="menu">menu</string>
    <string name="function">Function</string>
    <string name="shape">Shape</string>
    <string name="texture">Texture</string>
    <string name="color">Color</string>
    <string name="position">Position</string>
    <string name="render">Render</string>
    <string name="resolution">Resolution</string>
    <string name="precision">Precision</string>
    <string name="transform">transform</string>
    <string name="reaction">REACTION</string>
    <string name="reaction_position">POSITION</string>
    <string name="reaction_color">COLOR</string>
    <string name="resolution_low">LOW</string>
    <string name="resolution_med">MED</string>
    <string name="resolution_high">HIGH</string>
    <string name="precision_single">SINGLE</string>
    <string name="precision_dual">DUAL</string>
    <string name="precision_auto">AUTO</string>
    <string name="save">save</string>
    <string name="continuous_render">Continuous Render</string>
    <string name="display_params">Display Parameters</string>
    <string name="display_param1">param1</string>
    <string name="display_param2">param2</string>
    <string name="display_param3">param3</string>
    <string name="display_param4">param4</string>
    <string name="param1">P1</string>
    <string name="param2">P2</string>
    <string name="param3">P3</string>
    <string name="param4">P4</string>
    <string name="tex_param1">Q1</string>
    <string name="tex_param2">Q2</string>
    <string name="x">x</string>
    <string name="y">y</string>
    <string name="detail">Detail</string>
    <string name="juliaMode">Julia Mode</string>
    <string name="scale">Scale</string>
    <string name="bailout">Bailout Radius</string>
    <string name="frequency">Frequency</string>
    <string name="offset">Offset</string>
    <string name="sensitivity">Sensitivity</string>
    <string name="complex_i">+ i</string>
    <string name="e">e</string>
    <string name="ui">UI</string>
    <string name="left_arrow">left arrow</string>
    <string name="right_arrow">right arrow</string>
    <string name="equation">Equation</string>

    <string name="welcome_message">Welcome to Fractal Eye!</string>
    <string name="tutorial_position1" tools:ignore="ExtraTranslation">To move around and explore the fractal, click the POSITION button.</string>
    <string name="tutorial_position2">Swipe in any direction to move</string>
    <string name="tutorial_position3">Pinch to zoom in or out!</string>
    <string name="tutorial_color1">To change how the fractal is colored, click the COLOR button.</string>
    <string name="tutorial_color2">Swipe left or right to shift the colors</string>
    <string name="tutorial_color3">Pinch to make the colors change more or less frequently!</string>






    <!-- UTILITY -->
    <!-- ===================================================================================== -->
    <string name="header_sf">
        #version 300 es\n
        #define pi 3.141592654\n
        #define Sn 1e-8\n
        #define Sp 1e8\n
        #define Sh 1e4\n

        precision highp float;
        uniform int maxIter;
        uniform float R;
        uniform float x0;
        uniform float y0;
        uniform vec2 P1;
        uniform vec2 P2;
        uniform vec2 P3;
        uniform vec2 P4;
        uniform float Q1;
        uniform vec2 xScale;
        uniform vec2 yScale;
        uniform vec2 xOffset;
        uniform vec2 yOffset;

        in vec4 viewPos;
        out vec4 fragmentColor;
    </string>
    <string name="header_df">
        #version 300 es\n
        #define SPLIT 8193.\n
        #define pi 3.141592654\n
        #define Sn 1e-8\n
        #define Sp 1e8\n
        #define Sh 1e4\n

        precision highp float;
        uniform int maxIter;
        uniform float R;
        uniform float x0;
        uniform float y0;
        uniform vec2 P1;
        uniform vec2 P2;
        uniform vec2 P3;
        uniform vec2 P4;
        uniform float Q1;
        uniform vec2 xScale;
        uniform vec2 yScale;
        uniform vec2 xOffset;
        uniform vec2 yOffset;

        in vec4 viewPos;
        out vec4 fragmentColor;
    </string>

    <string name="color_header">
        #version 300 es\n

        precision highp float;
        uniform sampler2D tex;
        uniform int numColors;
        uniform vec3 palette[10];
        uniform float frequency;
        uniform float phase;

        in vec2 texCoord;
        out vec4 fragmentColor;
    </string>
    <string name="color_index">
        float n = mod(float(numColors - 1)*(frequency*s.z + phase), float(numColors - 1));
        int p = int(floor(n));
        float q = mod(n, 1.0);
        color = (1.0 - q)*palette[p] + q*palette[p + 1];

    </string>
    <string name="color_lighting">
        vec3 normRay = vec3(cos(s.x), sin(s.x), 1.0);
        normRay /= length(normRay);
        float lightHeight = 1.0;
        vec3 lightRay = vec3(1.0, 1.0, lightHeight);
        lightRay /= length(lightRay);
        vec3 viewRay = vec3(0.0, 0.0, 1.0);
        vec3 reflectRay = 2.0*dot(normRay, lightRay)*normRay - lightRay;

        float diffuse_intensity = 0.2;
        float phi = dot(normRay, lightRay) / lightHeight;
        float diffuse = clamp(phi, 0.0, 1.0);
        diffuse = diffuse_intensity*(diffuse - 1.0) + 1.0;

        float specular_intensity = 0.5;
        float specular_phong = 3.0;
        float alpha = dot(reflectRay, viewRay);
        float specular = clamp(alpha, 0.0, 1.0);
        specular = specular_intensity*1.5*pow(specular, specular_phong);
        diffuse *= 1.0 - specular;

        color = diffuse*color + specular;
    </string>

    <string name="arithmetic_util">

        vec2 quickTwoSum(float a, float b) {
            float s = a + b;
            float e = b - (s - a);
            return vec2(s, e);
        }

        vec2 twoSum(float a, float b) {
            float s = a + b;
            float v = s - a;
            float e = (a - (s - v)) + (b - v);
            return vec2(s, e);
        }

        vec3 threeSum(float a, float b, float c) {
            vec2 tmp;
            vec3 res = vec3(0.0);
            float t1, t2, t3;
            tmp = twoSum(a, b);
            t1 = tmp.x;
            t2 = tmp.y;
            tmp = twoSum(c, t1);
            res.x = tmp.x;
            t3 = tmp.y;
            tmp = twoSum(t2, t3);
            res.y = tmp.x;
            res.z = tmp.y;
            return res;
        }

        vec3 threeSumTwo(float a, float b, float c) {
            vec2 tmp;
            vec3 res = vec3(0.0);
            float t1, t2, t3;
            tmp = twoSum(a, b);
            t1 = tmp.x;
            t2 = tmp.y;
            tmp = twoSum(c, t1);
            res.x = tmp.x;
            t3 = tmp.y;
            res.y = t2 + t3;
            return res;
        }

        vec2 split(float a) {
            float t = a*SPLIT;
            float a_hi = t - (t - a);
            float a_lo = a - a_hi;
            return vec2(a_hi, a_lo);
        }

        vec2 twoProd(float a, float b) {
            float p = a*b;
            vec2 aS = split(a);
            vec2 bS = split(b);
            float err = ((aS.x*bS.x - p) + aS.x*bS.y + aS.y*bS.x) + aS.y*bS.y;
            return vec2(p, err);
        }

        vec2 twoSqr(float a) {
            float p = a*a;
            vec2 s = split(a);
            float e = ((s.x*s.x - p) + 2.0*s.x*s.y) + s.y*s.y;
            return vec2(p, e);
        }

    </string>
    <string name="arithmetic_sf">

        vec2 cConjSF(vec2 w) {
            return vec2(w.x, -w.y);
        }

        vec2 cMultSF(vec2 w1, vec2 w2) {
           return vec2(w1.x*w2.x - w1.y*w2.y, w1.x*w2.y + w2.x*w1.y);
        }

        vec2 cSqrSF(vec2 w) {
            return vec2(w.x*w.x - w.y*w.y, 2.0*w.x*w.y);
        }

        vec2 conjSF(vec2 w) {
           return vec2(w.x, -w.y);
        }

        float modSF(vec2 w) {
            return sqrt(w.x*w.x + w.y*w.y);
        }

        float modSqrSF(vec2 w) {
            return w.x*w.x + w.y*w.y;
        }

        vec2 cDivSF(vec2 w1, vec2 w2) {
            vec2 u = cMultSF(w1, conjSF(w2));
            return u/dot(w2, w2);
        }

        vec2 cSqrtSF(vec2 w) {
            float p = sqrt(modSF(w));
            float phi = atan(w.y, w.x) / 2.0;
            return p*vec2(cos(phi), sin(phi));
        }

        vec2 cExpSF(vec2 w) {
            return exp(w.x)*vec2(cos(w.y), sin(w.y));
        }

        vec2 cSinSF(vec2 z) {
            float u = sin(z.x)*cosh(z.y);
            float v = cos(z.x)*sinh(z.y);
            return vec2(u, v);
        }

        vec2 cCosSF(vec2 z) {
            float u = 0.5*(exp(-z.y) + exp(z.y))*cos(z.x);
            float v = 0.5*(exp(-z.y) - exp(z.y))*sin(z.x);
            return vec2(u, v);
        }

        vec2 cTanSF(vec2 z) {
            return cDivSF(cSinSF(z), cCosSF(z));
        }

        vec2 cLog(vec2 z) {
            float r = modSF(z);
            float theta = atan(z.y, z.x);
            return vec2(log(r + 0.01), theta);
        }

        vec2 cPow1(vec2 z, vec2 s) {
            float theta = atan(z.y, z.x);
            float r = sqrt(dot(z, z));
            float a = pow(r, s.x);
            float c = a*exp(-s.y*theta);
            float f = s.y*log(r) + s.x*theta;
            return c*vec2(cos(f), sin(f));
        }

        vec2 cPow2(float x, vec2 s) {

            float t;
            if (x == 0.0) { return vec2(0.0); }
            else if (x > 0.0) { t = 0.0; }
            else { t = pi; }

            float c = pow(x, s.x)*exp(-s.y*t);
            float f = s.x*t + s.y*log(x);
            return c*vec2(cos(f), sin(f));

        }

        vec2 cPow3(vec2 z, float p) {
            float theta = atan(z.y, z.x);
            float r = sqrt(dot(z, z));
            float c = pow(r, p);
            float f = p*theta;
            return c*vec2(cos(f), sin(f));
        }

        vec2 cPow4(vec2 z, vec2 s) {
            float theta = atan(z.y, z.x);
            float r = sqrt(dot(z, z));
            float a = pow(r, s.x);
            float b = exp(-s.y*theta);
            float c = a*b;
            float qq = s.y*log(r + 0.001);
            float f = qq + s.x*theta;
            return c*vec2(cos(f), sin(f));
        }

        vec2 boxFoldSF(vec2 z) {
            vec2 w = z;
            if (z.x &lt; -1.0) { w.x = -2.0 - z.x; }
            else if (z.x > 1.0) { w.x = 2.0 - z.x; }
            if (z.y &lt; -1.0) { w.y = -2.0 - z.y; }
            else if (z.y > 1.0) { w.y = 2.0 - z.y; }
            return w;
        }

        vec2 ballFoldSF(vec2 z) {
            float modZ = modSF(z);
            float coef = 1.0;
            if (modZ &lt; 0.5) { coef = 4.0; }
            else if (modZ > 0.5 &amp;&amp; modZ &lt; 1.0) { coef = 1.0/(modZ*modZ); }
            return coef*z;
        }

        float _m(float _a, float _b) {
            return (_a*_b) * Sp;
        }

        vec2 _cMultSF(vec2 _a, vec2 _b) {
            return vec2(_m(_a.x, _b.x) - _m(_a.y, _b.y), _m(_a.x, _b.y) + _m(_b.x, _a.y));
        }

        vec2 _sqr(vec2 _a) {
            return vec2(_m(_a.x, _a.x) - _m(_a.y, _a.y), 2.0*_m(_a.x, _a.y));
        }

        float _modSF(vec2 _a) {
            return sqrt(_m(_a.x, _a.x) + _m(_a.y, _a.y)) * Sh;
        }

        float _modSqrSF(vec2 _a) {
            return _m(_a.x, _a.x) + _m(_a.y, _a.y);
        }

    </string>
    <string name="arithmetic_df">

        vec2 addDF(vec2 a, vec2 b) {
            vec2 s;
            vec2 t;
            s = twoSum(a.x, b.x);
            t = twoSum(a.y, b.y);
            s.y += t.x;
            s = quickTwoSum(s.x, s.y);
            s.y += t.y;
            s = quickTwoSum(s.x, s.y);
            return s;
        }

        vec2 multDF(vec2 a, vec2 b) {
            vec2 p;
            p = twoProd(a.x, b.x);
            p.y += a.x * b.y;
            p.y += a.y * b.x;
            p = quickTwoSum(p.x, p.y);
            return p;
        }

        vec2 sqrDF(vec2 a) {
            vec2 p;
            p = twoSqr(a.x);
            p.y += 2.0*a.x*a.y;
            p = quickTwoSum(p.x, p.y);
            return p;
        }

        vec2 sqrtDF(vec2 a) {
            float xn = 1.0/sqrt(a.x);
            float yn = a.x*xn;
            vec2 ynSqr = sqrDF(vec2(yn, 0.0));
            float diff = (addDF(a, -ynSqr)).x;
            vec2 prod = multDF(twoProd(xn, diff), vec2(0.5, 0.0));
            return addDF(vec2(yn, 0.0), prod);
        }

        vec2 divDF(vec2 a, vec2 b) {
            float xn = 1.0/b.x;
            float yn = a.x*xn;
            float diff = addDF(a, -multDF(b, vec2(yn, 0.0))).x;
            vec2 prod = twoProd(xn, diff);
            return addDF(vec2(yn, 0.0), prod);
        }

        vec2 modSqrDF(vec2 X, vec2 Y) {
            return addDF(sqrDF(X), sqrDF(Y));
        }

        vec2 modDF(vec2 a, vec2 b) {
            return sqrtDF(modSqrDF(a, b));
        }

        vec2 modDF2(vec2 a, vec2 b) {
            return multDF(a, sqrtDF(addDF(vec2(1.0, 0.0), sqrDF(divDF(b, a)))));
        }

        vec2 absDF(vec2 a) {
            if (a.x &lt; 0.0) { return -a; }
            else { return a; }
        }

        vec4 cMultDF(vec2 X, vec2 Y, vec2 A, vec2 B) {
            vec2 U = addDF(multDF(X, A), -multDF(Y, B));
            vec2 V = addDF(multDF(X, B), multDF(Y, A));
            return vec4(U, V);
        }

        vec4 cDivDF(vec2 X, vec2 Y, vec2 A, vec2 B) {
            vec2 S1 = modSqrDF(A, B);
            vec4 S2 = cMultDF(X, Y, A, -B);
            vec2 U = divDF(S2.xy, S1);
            vec2 V = divDF(S2.zw, S1);
            return vec4(U, V);
        }

        vec4 cSqrDF(vec2 X, vec2 Y) {
            vec2 U = addDF(sqrDF(X), -sqrDF(Y));
            vec2 V = multDF(vec2(2.0, 0.0), multDF(X, Y));
            return vec4(U, V);
        }

        vec4 cSinDF(vec2 X, vec2 Y, int n) {
            vec4 zSqr = cSqrDF(X, Y);
            vec2 U = X;
            vec2 V = Y;
            vec4 prod = vec4(X, Y);
            float coef1 = 1.0;
            float coef2 = 1.0;
            float coef3;
            for (int i = 1; i &lt; 2*n - 1; i = i+2) {
                prod = cMultDF(prod.xy, prod.zw, zSqr.xy, zSqr.zw);
                coef1 = coef1 * -1.0;
                coef2 = coef2 / float(i+1) / float(i+2);
                coef3 = coef1 * coef2;
                U = addDF(U, multDF(vec2(coef3, 0.0), prod.xy));
                V = addDF(V, multDF(vec2(coef3, 0.0), prod.zw));
            }
            return vec4(U, V);
        }

        vec4 cCosDF(vec2 X, vec2 Y, int n) {
            vec4 zSqr = cSqrDF(X, Y);
            vec2 U = addDF(vec2(1.0, 0.0), multDF(vec2(-0.5, 0.0), zSqr.xy));
            vec2 V = multDF(vec2(-0.5, 0.0), zSqr.zw);
            vec4 prod = zSqr;
            float coef1 = 0.5;
            float coef2 = -1.0;
            float coef3;
            for (int i = 2; i &lt; 2*n; i = i+2) {
                prod = cMultDF(prod.xy, prod.zw, zSqr.xy, zSqr.zw);
                coef1 = coef1 * -1.0;
                coef2 = coef2 / float(i+1) / float(i+2);
                coef3 = coef1 * coef2;
                U = addDF(U, multDF(vec2(coef3, 0.0), prod.xy));
                V = addDF(V, multDF(vec2(coef3, 0.0), prod.zw));
            }
            return vec4(U, V);
        }

        vec4 cSinhDF(vec2 X, vec2 Y, int n) {
            vec4 zSqr = cSqrDF(X, Y);
            vec2 U = X;
            vec2 V = Y;
            vec4 prod = vec4(X, Y);
            float coef = 1.0;
            for (int i = 1; i &lt; 2*n - 1; i = i+2) {
                prod = cMultDF(prod.xy, prod.zw, zSqr.xy, zSqr.zw);
                coef = coef / float(i+1) / float(i+2);
                U = addDF(U, multDF(vec2(coef, 0.0), prod.xy));
                V = addDF(V, multDF(vec2(coef, 0.0), prod.zw));
            }
            return vec4(U, V);
        }

        vec4 boxFoldDF(vec2 X, vec2 Y) {
            vec2 U = X;
            vec2 V = Y;
            if (X.x &lt; -1.0) { U = addDF(vec2(-2.0, 0.0), -X); }
            else if (X.x > 1.0) { U = addDF(vec2(2.0, 0.0), -X); }
            if (Y.x &lt; -1.0) { V = addDF(vec2(-2.0, 0.0), -Y); }
            else if (Y.x > 1.0) { V = addDF(vec2(2.0, 0.0), -Y); }
            return vec4(U, V);
        }

        vec4 ballFoldDF(vec2 X, vec2 Y) {
            vec2 modZ = modDF(X, Y);
            vec2 U = X;
            vec2 V = Y;
            if (modZ.x &lt; 0.5) {
                U = multDF(vec2(4.0, 0.0), X);
                V = multDF(vec2(4.0, 0.0), Y);
            }
            else if (modZ.x > 0.5 &amp;&amp; modZ.x &lt; 1.0) {
                vec2 modSqrZ = modSqrDF(X, Y);
                U = divDF(X, modSqrZ);
                V = divDF(Y, modSqrZ);
            }
            return vec4(U, V);
        }

    </string>

    <string name="general_init_sf">
        vec4 colorParams = vec4(0.0);
        vec2 C = vec2(xScale.x*viewPos.x + xOffset.x, yScale.x*viewPos.y + yOffset.x);
        vec2 Z, Z1, Z2 = vec2(0.0);
        float modZ = 0.0;
        float eps = 0.0;
        float useUniforms = P1.x + P2.x + P3.x + P4.x + Q1 + x0 + y0 + R;
    </string>
    <string name="general_init_df">
        vec4 colorParams = vec4(0.0);
        vec2 A = addDF(multDF(xScale, vec2(viewPos.x, 0.0)), xOffset);
        vec2 B = addDF(multDF(yScale, vec2(viewPos.y, 0.0)), yOffset);
        vec2 X, X1, X2 = vec2(0.0, 0.0);
        vec2 Y, Y1, Y2 = vec2(0.0, 0.0);
        vec2 modZ = vec2(0.0);
        float eps = 0.0;
        float useUniforms = P1.x + P2.x + P3.x + P4.x + Q1 + x0 + y0 + R;
    </string>
    <string name="general_loop_sf">
        Z2 = Z1;
        Z1 = Z;
    </string>
    <string name="general_loop_df">
        X2 = X1;
        X1 = X;
        Y2 = Y1;
        Y1 = Y;
    </string>





    <!-- COMPLEX MAPS -->
    <!-- ===================================================================================== -->

    <!-- MANDELBROT -->
    <string name="mandelbrot_loop_sf">
        Z = cSqrSF(Z1) + C;
    </string>
    <string name="mandelbrot_loop_df">
        vec4 Q = cSqrDF(X1, Y1);
        X = addDF(Q.xy, A);
        Y = addDF(Q.zw, B);
    </string>
    <string name="mandelbrot_katex">
        $z_{n+1} = z_{n}^2 + %s$
    </string>

    <!-- MANDELBROT CPOW -->
    <string name="mandelbrotcpow_loop_sf">
        Z = cPow4(Z1, P1) + C;
    </string>
    <string name="mandelbrotcpow_katex">
        $z_{n+1} = z_{n}^{P1} + %s$
    </string>

    <!-- DUALPOW -->
    <string name="dualpow_init_sf">
        vec2 alpha = vec2(1.0, 0.0);
        vec2 beta = vec2(1.0, 0.0);
    </string>
    <string name="dualpow_loop_sf">
        Z = cMultSF(C, cMultSF(alpha, cPow4(Z, P1)) + cMultSF(beta, cPow4(Z, -P1)));
    </string>
    <string name="dualpow_katex">
        $z_{n+1} = %s \\cdot (z_{n}^{P1} + z_{n}^{-P1})$
    </string>

    <!-- MANDELBOX -->
    <string name="mandelbox_loop_sf">
        Z = cMultSF(P1, ballFoldSF(boxFoldSF(Z1))) + C;
    </string>
    <string name="mandelbox_loop_df">
        vec4 Q1 = boxFoldDF(X1, Y1);
        vec4 Q2 = ballFoldDF(Q1.xy, Q1.zw);
        vec4 Q3 = cMultDF(vec2(P1.x, 0.0), vec2(P1.y, 0.0), Q2.xy, Q2.zw);
        X = addDF(Q3.xy, A);
        Y = addDF(Q3.zw, B);
    </string>
    <string name="mandelbox_katex">
        $z_{n+1} = \\small \\textrm{ballFold}\\big(\\textrm{boxFold}(z_n)\\big) + %s$
    </string>

    <!-- KALI -->
    <string name="kali_loop_sf">
        vec2 Q = abs(Z1);
        Z = Q/modSqrSF(Q) + P1;
    </string>
    <string name="kali_loop_df">
        vec2 Q1 = absDF(X1);
        vec2 Q2 = absDF(Y1);
        vec2 Q3 = modSqrDF(Q1, Q2);
        X = addDF(divDF(Q1, Q3), vec2(P1.x, 0.0));
        Y = addDF(divDF(Q2, Q3), vec2(P1.y, 0.0));
    </string>
    <string name="kali_katex">
        $z_{n+1} = \\large\\frac{\\textrm{abs}(z_n)}{|\\textrm{abs}(z_n)|^2} +\\small P1$
    </string>

    <string name="kalisquare_loop_sf">
        Z = abs(Z1)/(Z1.x*Z1.y) + P1;
    </string>

    <!-- MANDELBAR -->
    <string name="mandelbar_loop_sf">
        Z = cSqrSF(conjSF(Z1)) + C;
    </string>

    <!-- LOGISTIC -->
    <string name="logistic_loop_sf">
        Z = cDivSF(Z1 - cSqrSF(Z1), C);
    </string>
    <string name="logistic_loop_df">
        vec4 Q1 = cSqrDF(X1, Y1);
        vec2 Q2 = addDF(X1, -Q1.xy);
        vec2 Q3 = addDF(Y1, -Q1.zw);
        vec4 Q4 = cDivDF(Q2, Q3, A, B);
        X = Q4.xy;
        Y = Q4.zw;
    </string>
    <string name="logistic_katex">
        $z_{n+1} = \\Large \\frac{z_n - z_n^2}{%s}$
    </string>

    <!-- BURNING SHIP -->
    <string name="burningship_init_sf">
        C = vec2(C.x, -C.y);
    </string>
    <string name="burningship_loop_sf">
        Z = cSqrSF(abs(Z1)) + C;
    </string>
    <string name="burningship_init_df">
        B = -B;
    </string>
    <string name="burningship_loop_df">
        vec4 Q = cSqrDF(absDF(X1), absDF(Y1));
        X = addDF(Q.xy, A);
        Y = addDF(Q.zw, B);
    </string>
    <string name="burningship_katex">
        $z_{n+1} = \\textrm{abs}(z_n)^2 + %s$
    </string>

    <!-- MAGNET -->
    <string name="magnet_loop_sf">
        Z = cSqrSF(cDivSF(cSqrSF(Z1) + C + P1, 2.0*Z1 + C + P2));
    </string>

    <!-- SINE -->
    <string name="sine_loop_sf">
        Z = cSinSF(Z1) + C;
    </string>
    <string name="sine_loop_df">
        vec4 Q1 = cSinDF(X1, Y1, 10);
        X = addDF(Q1.xy, A);
        Y = addDF(Q1.zw, B);
    </string>
    <string name="sine_katex">
        $z_{n+1} = \\sin(z_n) + %s$
    </string>

    <string name="sine1_loop_sf">
        Z = cSinSF(cDivSF(cPow3(Z1, P1.x), C));
    </string>
    <string name="sine1_katex">
        $z_{n+1} = \\sin(\\frac{z_n^{\\operatorname{Re}(P1)}}{%s})$
    </string>

    <string name="sine2_loop_sf">
        Z = cSinSF(cDivSF(cSqrSF(Z1) + P1, C));
    </string>
    <string name="sine2_loop_df">
        vec4 Q1 = cSqrDF(X1, Y1);
        vec2 Q2 = addDF(Q1.xy, vec2(P1.x, 0.0));
        vec2 Q3 = addDF(Q1.zw, vec2(P1.y, 0.0));
        vec4 Q4 = cDivDF(Q2, Q3, A, B);
        vec4 Q5 = cSinDF(Q4.xy, Q4.zw, 8);
        X = Q5.xy;
        Y = Q5.zw;
    </string>
    <string name="sine2_katex">
        $z_{n+1} = \\sin(\\large\\frac{z_n^2 + P1}{%s}\\normalsize)$
    </string>

    <!-- HORSESHOE CRAB -->
    <string name="horseshoecrab_loop_sf">
        Z = cSinSF(cDivSF(P1, Z1) + cDivSF(Z1, C));
    </string>
    <string name="horseshoecrab_loop_df">
        vec4 S1 = cDivDF(vec2(P1.x, 0.0), vec2(P1.y, 0.0), X1, Y1);
        vec4 S2 = cDivDF(X1, Y1, A, B);
        vec2 U = addDF(S1.xy, S2.xy);
        vec2 V = addDF(S1.zw, S2.zw);
        vec4 Q = cSinDF(U, V, 8);
        X = Q.xy;
        Y = Q.zw;
    </string>
    <string name="horseshoecrab_katex">
        $f(z) = \\sin (\\frac{P1}{z} + \\frac{z}{%s})$
    </string>

    <!-- PERSIAN RUG -->
    <string name="persianrug_init_sf">
        Z = C;
    </string>
    <string name="persianrug_loop_sf">
        Z = cMultSF(Z1, cSinSF(cTanSF(P1 - cDivSF(C, Z1))) + Z1 + cTanSF(Z1));
    </string>
    <string name="persianrug_katex">
        $z_{n+1} = z \\cdot \\big(\\sin\\big(\\tan(P1 - \\large\\frac{%s}{z_n}\\normalsize)\\big) + z_n + \\tan(z_n)\\big)$
    </string>

    <!-- KLEINIAN -->
    <string name="kleinian_init_sf">
        vec2 P = P2;
        vec2 q = Z - P;
        float h = atan(q.y, q.x);
        Z = P + vec2(cos(h), sin(h))/modSF(q);
    </string>
    <string name="kleinian_loop_sf">
        if (Z.y &lt; 0.0 || Z.y &gt; P1.x) {
            break;
        }
        else {
            Z.x = mod(Z1.x + 2.0*float(maxIter) - 1.0, 2.0) - 1.0;
        }
        if (Z.y &lt; P1.x/2.0) {
            Z = cDivSF(cMultSF(vec2(P1.x, 0.0), Z) + vec2(0.0, -1.0), cMultSF(vec2(0.0, -1.0), Z));
        }
        else {
            Z = cDivSF(vec2(0.0, 1.0), cMultSF(vec2(0.0, 1.0), Z) + vec2(P1.x, 0.0));
        }
    </string>
    <string name="kleinian_init_df">
        vec2 P = P2;
        vec2 q = vec2(X.x, Y.x) - P;
        float h = atan(q.y, q.x);
        X = vec2(P.x + cos(h)/modSF(q), 0.0);
        Y = vec2(P.y + sin(h)/modSF(q), 0.0);
    </string>
    <string name="kleinian_loop_df">
        if (Y.x &lt; 0.0 || Y.x &gt; P1.x) {
            break;
        }
        else {
            X = vec2(mod(addDF(addDF(X1, vec2(2.0*float(maxIter), 0.0), vec2(-1.0, 0.0).x), 2.0) - 1.0, 0.0);
        }
        if (Z.y &lt; t.x/2.0) {
            Z = cDivSF(cMultSF(t, Z) + vec2(0.0, -1.0), cMultSF(vec2(0.0, -1.0), Z));
        }
        else {
            Z = cDivSF(vec2(0.0, 1.0), cMultSF(vec2(0.0, 1.0), Z) + t);
        }
    </string>

    <!-- NEWTON 1 -->
    <string name="newton1_loop_sf">
        Z = Z - cDivSF(cSqrSF(cSqrSF(Z)) - vec2(1.0, 0.0), 4.0*cMultSF(Z, cSqrSF(Z)));
    </string>
    <string name="newton2_loop_sf">
        vec2 W = cMultSF(Z - P1, Z - P2);
        vec2 numerator = cMultSF(W, Z - P3);
        vec2 denominator = W + cMultSF(Z - P3, 2.0*Z - P1 - P2);
        Z = Z - cDivSF(numerator, denominator);
    </string>

    <!-- MOBIUS -->
    <string name="mobius_loop_sf">
        Z = cDivSF(cMultSF(P1, Z) + P2, cMultSF(P3, Z) + P4);
    </string>

    <!-- TEST -->
    <string name="test_init_sf">
    </string>
    <string name="test_loop_sf">
        Z = abs(cSinSF(cSqrSF(Z1) - vec2(-Z1.y, Z1.x))) + C;
    </string>
    <string name="test_loop_df">
        vec4 Q1 = cSqrDF(X1, Y1);
        vec2 Q2 = addDF(Q1.xy, vec2(P1.x, 0.0));
        vec2 Q3 = addDF(Q1.zw, vec2(P1.y, 0.0));
        vec4 Q4 = ballFoldDF(Q2, Q3);
        X = addDF(Q4.xy, A);
        Y = addDF(Q4.zw, B);
    </string>




    <!-- CONDITIONALS -->
    <!-- ===================================================================================== -->

    <!-- ESCAPE -->
    <string name="escape_sf">
        modZ = modSF(Z);
        if (modZ > R || isinf(Z.x*Z.x) || isinf(Z.y*Z.y) || isinf(modSqrSF(Z)))
    </string>
    <string name="escape_df_2">
        modZ = modDF(X, Y);
        if (modZ.x > R || !(modZ.x &lt; 0.0 || 0.0 &lt; modZ.x))
    </string>
    <string name="escape_df">
        modZ = modDF(X, Y);
        if (modZ.x > R || isinf(X.x*X.x) || isinf(Y.x*Y.x) || isinf(X.x*X.x + Y.x*Y.x))
    </string>

    <!-- CONVERGE -->
    <string name="converge_sf">
        eps = modSF(Z - Z1);
        if (eps &lt; 1e-9)
    </string>
    <string name="converge_df">
        eps = modSqrDF(addDF(X, -X1), addDF(Y, -Y1)).x;
        if (eps &lt; 1e-9)
    </string>




    <!-- INITIALIZATIONS -->
    <!-- ===================================================================================== -->

    <!-- CONSTANT -->
    <string name="constant_sf">
        Z = vec2(x0, y0);
    </string>
    <string name="constant_df">
        X = vec2(x0, 0.0);
        Y = vec2(y0, 0.0);
    </string>

    <!-- JULIA -->
    <string name="julia_sf">
        Z = C;
    </string>
    <string name="julia_df">
        X = A;
        Y = B;
    </string>




    <!-- TEXTURE ALGORITHMS -->
    <!-- ===================================================================================== -->

    <!--  -->

    <!-- CONDITIONAL ITERATION -->
    <string name="escape_final">
        float j = float(n)/float(maxIter);
        colorParams.z = j;
    </string>


    <!-- CONVERGE SMOOTH -->
    <string name="converge_smooth_final">

    </string>


    <!-- ESCAPE SMOOTH -->
    <string name="mandelbrot_smooth_final_sf">
        float i = float(n)-log(0.5*log(modSF(Z1)))/log(2.0);
        float j = 0.5*(cos(2.0*pow(i + 5.0, 0.4) -  0.3) + 1.0);
        colorParams.z = j;
    </string>
    <string name="mandelbrot_smooth_final_df">
        float i = float(n)-log(0.5*log(modDF(X1, Y1).x))/log(2.0);
        colorParams.z = i;
    </string>
    <string name="mandelbrot_smooth_final_df2">
        float i = float(n)-log(0.5*log(modDF(X1, Y1).x))/log(2.0);
        float j = 0.5*(cos(2.0*pow(i + 5.0, 0.4) -  0.3) + 1.0);
        colorParams.z = j;
    </string>


    <!-- DISTANCE ESTIMATION -->
    <string name="mandelbrot_dist_init_sf">
        vec2 alpha = vec2(0.0);
    </string>
    <string name="mandelbrot_dist_loop_sf">
        alpha = 2.0*cMultSF(Z1, alpha) + vec2(1.0, 0.0);
    </string>
    <string name="mandelbrot_dist_final_sf">
        colorParams.z = modZ*log(modZ)/modSF(alpha);
    </string>
    <string name="mandelbrot_dist_init_df">
        vec2 alpha = vec2(0.0);
        vec2 Z, Z1;
    </string>
    <string name="mandelbrot_dist_loop_df">
        Z1 = vec2(X1.x, Y1.x);
        Z = vec2(X.x, Y.x);
        alpha = 2.0*cMultSF(Z1, alpha) + vec2(1.0, 0.0);
    </string>
    <string name="mandelbrot_dist_final_df">
        colorParams.z = modZ.x*log(modZ.x)/modSF(alpha);
    </string>

    <string name="mandelbrot_normal1_init_sf">
        vec2 alpha = vec2(0.0);
    </string>
    <string name="mandelbrot_normal1_loop_sf">
        alpha = 2.0*cMultSF(Z1, alpha) + vec2(1.0, 0.0);
    </string>
    <string name="mandelbrot_normal1_final_sf">
        vec2 u = cDivSF(Z, alpha);
        colorParams.z = atan(u.y, u.x)/(2.0*pi) + 1.0;
    </string>
    <string name="mandelbrot_normal1_init_df">
        vec2 alpha = vec2(0.0);
        vec2 Z, Z1;
    </string>
    <string name="mandelbrot_normal1_loop_df">
        Z1 = vec2(X1.x, Y1.x);
        Z = vec2(X.x, Y.x);
        alpha = 2.0*cMultSF(Z1, alpha) + vec2(1.0, 0.0);
    </string>
    <string name="mandelbrot_normal1_final_df">
        vec2 u = cDivSF(Z, alpha);
        colorParams.z = atan(u.y, u.x)/(2.0*pi) + 1.0;
    </string>

    <string name="mandelbrot_normal2_init_sf">
        vec2 alpha = vec2(0.0);
        vec2 beta = vec2(0.0);
    </string>
    <string name="mandelbrot_normal2_loop_sf">
        beta = 2.0*(cMultSF(Z1, beta) + cSqrSF(alpha));
        alpha = 2.0*cMultSF(Z1, alpha) + vec2(1.0, 0.0);
    </string>
    <string name="mandelbrot_normal2_final_sf">
        float logModZ = log(modZ);
        vec2 u = cMultSF(cMultSF(Z, alpha), (logModZ + 1.0)*cConjSF(cSqrSF(alpha)) - logModZ*cConjSF(cMultSF(Z, beta)));
        colorParams.z = atan(u.y, u.x)/(2.0*pi) + 1.0;
    </string>
    <string name="mandelbrot_normal2_init_df">
        vec2 alpha = vec2(0.0);
        vec2 beta = vec2(0.0);
        vec2 Z, Z1;
    </string>
    <string name="mandelbrot_normal2_loop_df">
        Z1 = vec2(X1.x, Y1.x);
        Z = vec2(X.x, Y.x);
        beta = 2.0*(cMultSF(Z1, beta) + cSqrSF(alpha));
        alpha = 2.0*cMultSF(Z1, alpha) + vec2(1.0, 0.0);
    </string>
    <string name="mandelbrot_normal2_final_df">
        float logModZ = log(modZ.x);
        vec2 u = cMultSF(cMultSF(Z, alpha), (logModZ + 1.0)*cConjSF(cSqrSF(alpha)) - logModZ*cConjSF(cMultSF(Z, beta)));
        colorParams.z = atan(u.y, u.x)/(2.0*pi) + 1.0;
    </string>

    <string name="mandelbrot_distgrad_init_sf">
        vec2 alpha = vec2(0.0);
        vec2 beta = vec2(0.0);
    </string>
    <string name="mandelbrot_distgrad_loop_sf">
        beta = 2.0*(cMultSF(beta, Z1) + cSqrSF(alpha));
        alpha = 2.0*cMultSF(alpha, Z1) + vec2(1.0, 0.0);
    </string>
    <string name="mandelbrot_distgrad_final_sf">
        float logModZ = log(modZ);
        float modAlpha = modSF(alpha);
        float dist = 2.0*modZ*logModZ/modAlpha;
        vec2 grad = 2.0*cMultSF(alpha/modAlpha, (logModZ + 1.0)/modZ*Z - modZ*logModZ/(modAlpha*modAlpha)*beta);
        colorParams.z = atan(grad.y, grad.x)/(2.0*pi) + 1.0;
    </string>
    <string name="mandelbrot_distgrad_init_df">
        vec2 alpha = vec2(0.0);
        vec2 beta = vec2(0.0);
        vec2 Z, Z1 = vec2(0.0);
    </string>
    <string name="mandelbrot_distgrad_loop_df">
        Z = vec2(X.x, Y.x);
        Z1 = vec2(X1.x, Y1.x);
        beta = 2.0*(cMultSF(beta, Z) + cSqrSF(alpha));
        alpha = 2.0*cMultSF(alpha, Z) + vec2(1.0, 0.0);
    </string>
    <string name="mandelbrot_distgrad_final_df">
        float logModZ = log(modZ.x);
        float modAlpha = modSF(alpha);
        float dist = 2.0*modZ.x*logModZ/modAlpha;
        vec2 grad = 2.0*cMultSF(alpha, (logModZ + 1.0)*modAlpha/modZ.x*Z - modZ*logModZ/modAlpha*beta)/modSqrSF(beta);
        colorParams.z = atan(grad.y, grad.x)/(2.0*pi) + 1.0;
    </string>


    <!-- EXPONENTIAL SMOOTHING -->
    <string name="exponential_smooth_init">
        float sum = 0.0;
    </string>
    <string name="exponential_smooth_loop_sf">
        sum = sum + exp(-modZ);
    </string>
    <string name="exponential_smooth_loop_df">
        sum = sum + exp(-modZ.x);
    </string>
    <string name="exponential_smooth_final">
        colorParams.z = sum;
    </string>


    <!-- LIGHTING -->
    <string name="mandelbrot_light_init_sf">
        vec2 a = vec2(0.0);
        vec2 b = vec2(0.0);
    </string>
    <string name="mandelbrot_light_loop_sf">
        b = 2.0*(cMultSF(b, Z1) + cSqrSF(a));
        a = 2.0*cMultSF(a, Z1) + vec2(1.0, 0.0);
    </string>
    <string name="mandelbrot_light_final_sf">
        vec2 u = cDivSF(Z, a);
        float theta = atan(u.y, u.x);
        colorParams.x = theta;
    </string>
    <string name="mandelbrot_light_final2_sf">
        vec2 u = cMultSF(cMultSF(Z, a), (log(modZ) + 1.0)*cConjSF(cSqrSF(a)) - log(modZ)*cConjSF(cMultSF(Z, b)));
        float theta = atan(u.y, u.x);
        colorParams.x = theta;
    </string>
    <string name="mandelbrot_light_init_df">
        vec4 a = vec4(0.0);
    </string>
    <string name="mandelbrot_light_loop_df">
        a = cMultDF(a.xy, a.zw, X1, Y1);
        a.xy = multDF(vec2(2.0, 0.0), a.xy);
        a.zw = multDF(vec2(2.0, 0.0), a.zw);
        a.xy = addDF(a.xy, vec2(1.0, 0.0));
    </string>
    <string name="mandelbrot_light_final_df">
        vec4 u = cDivDF(X1, Y1, a.xy, a.zw);
        float theta = atan(u.z, u.x);
        colorParams.x = theta;
    </string>
    <string name="mandelbrot_light_color_sf">
        float theta = colorParams.x;
        vec3 normRay = vec3(cos(theta), sin(theta), 1.0);
        normRay = normalize(normRay);
        vec3 reflectRay = 2.0*dot(normRay, lightRay)*normRay - lightRay;
        // vec3 reflectRay = reflect(lightRay, normRay);
        float diffuse = dot(normRay, lightRay);
        if (diffuse &lt; 0.0) { diffuse = 0.0; }
        diffuse = 1.75*(diffuse + 0.2);
        float specular = pow(dot(reflectRay, viewRay), 1.5);
        if (specular &lt; 0.0) { specular = 0.0; }
        specular = 0.75*(specular + 0.01);
        color = diffuse*color + specular;
    </string>


    <!-- TRIANGLE INEQUALITY AVERAGE -->
    <string name="triangle_init_sf" tools:ignore="TypographyOther">
        float modC = modSF(C);
        float modSqrZ2 = 0.0;
        float sum, sum1 = 0.0;
        float il = 1.0/log(2.0);
        float llr = log(log(R)/2.0);
    </string>
    <string name="triangle_loop_sf">
        if (n > 2) {
            sum1 = sum;
            modSqrZ2 = modSqrSF(Z2);
            float m = abs(modSqrZ2 - modC);
            float M = modSqrZ2 + modC;
            float p = modSF(Z1) - m;
            float q = M - m;
            sum += p / q;
        }
    </string>
    <string name="triangle_final_sf">
        sum /= float(n);
        sum1 /= float(n - 1);
        float r = il*llr - il*log(0.5*log(modSqrSF(Z1)));
        float s = sum1 + (sum - sum1)*(r + 1.0);
        colorParams.z = s;
    </string>
    <string name="triangle_init_sf2" tools:ignore="TypographyOther">
        float _modC = modSF(C)*Sn;
        float _modSqrZ2 = 0.0;
        float sum, sum1 = 0.0;
        float il = 1.0/log(2.0);
        float llr = log(log(R)/2.0);
    </string>
    <string name="triangle_loop_sf2">
        if (n > 2) {
            sum1 = sum;
            _modSqrZ2 = _modSqrSF(Z2*Sn);
            float _m = abs(_modSqrZ2 - _modC);
            float _M = _modSqrZ2 + _modC;
            float _p = _modSF(Z1*Sn) - _m;
            float _q = _M - _m;
            sum += _p / _q;
        }
    </string>
    <string name="triangle_final_sf2">
        sum /= float(n);
        sum1 /= float(n - 1);
        float r = il*llr - il*log(0.5*log(modSqrSF(Z1)));
        float s = sum1 + (sum - sum1)*(r + 1.0);
        colorParams.z = s;
    </string>
    <string name="triangle_init_df" tools:ignore="TypographyOther">
        vec2 modC = modDF(A, B);
        vec2 modSqrZ2;
        vec2 sum, sum1 = vec2(0.0);
        float il = 1.0/log(2.0);
        float llr = log(log(R)/2.0);
    </string>
    <string name="triangle_loop_df">
        if (n > 2) {
            sum1 = sum;
            modSqrZ2 = modSqrDF(X2, Y2);
            vec2 m = absDF(addDF(modSqrZ2, -modC));
            vec2 M = addDF(modSqrZ2, modC);
            vec2 p = addDF(modDF(X1, Y1), -m);
            vec2 q = addDF(M, -m);
            sum = addDF(sum, divDF(p, q));
        }
    </string>
    <string name="triangle_final_df">
        sum = multDF(sum, vec2(1.0/float(n), 0.0));
        sum1 = multDF(sum1, vec2(1.0/float(n - 1), 0.0));
        float r = il*llr - il*log(0.5*log(modSqrDF(X1, Y1).x));
        float s = sum1.x + (sum.x - sum1.x)*(r + 1.0);
        colorParams.z = s;
    </string>
    <string name="triangle_init_df2" tools:ignore="TypographyOther">
        float modC = modDF(A, B).x;
        float modSqrZ1;
        float sum, sum1 = 0.0;
    </string>
    <string name="triangle_loop_df2">
        if (n > 0) {
            sum1 = sum;
            modSqrZ1 = modSqrDF(X1, Y1).x;
            float m = abs(modSqrZ1 - modC);
            float M = modSqrZ1 + modC;
            float p = modZ.x - m;
            float q = M - m;
            sum += p / q;
        }
    </string>
    <string name="triangle_final_df2">
        sum /= float(n);
        sum1 /= float(n - 1);
        float r = il*llr - il*log(0.5*log(modSqrDF(X1, Y1).x));
        float s = sum1 + (sum - sum1)*(r + 1.0);
        colorParams.z = s;
    </string>


    <!-- CURVATURE AVERAGE -->
    <string name="curvature_init">
        float sum, sum1 = 0.0;
        float il = 1.0/log(2.0);
        float llr = log(log(R)/2.0);
    </string>
    <string name="curvature_loop_sf">
        if (n > 1) {
            sum1 = sum;
            vec2 w = cDivSF(Z - Z1, Z1 - Z2);
            sum += abs(atan(w.y, w.x));
        }
    </string>
    <string name="curvature_final_sf">
        sum /= float(n) * pi;
        sum1 /= float(n - 1) * pi;
        float r = il*llr - il*log(0.5*log(modSqrSF(Z1)));
        float s = sum1 + (sum - sum1)*(r + 1.0);
        colorParams.z = s;
    </string>
    <string name="curvature_loop_df">
        if (n > 1) {
            sum1 = sum;
            vec2 w = cDivSF(vec2(X.x - X1.x, Y.x - Y1.x), vec2(X1.x - X2.x, Y1.x - Y2.x));
            sum += abs(atan(w.y, w.x));
        }
    </string>
    <string name="curvature_final_df">
        sum /= float(n) * pi;
        sum1 /= float(n - 1) * pi;
        float r = il*llr - il*log(0.5*log(modSqrSF(vec2(X1.x, Y1.x))));
        float s = sum1 + (sum - sum1)*(r + 1.0);
        colorParams.z = s;
    </string>


    <!-- STRIPE AVERAGE -->
    <string name="stripe_init">
        float pow;
        if (P1.x == 0.0) {
            pow = 2.0;
        }
        else {
            pow = P1.x;
        }
        float argZ;
        float sum, sum1 = 0.0;
        float il = 1.0/log(2.0);
        float llr = log(log(R)/2.0);
    </string>
    <string name="stripe_loop_sf">
        sum1 = sum;
        argZ = atan(Z.y, Z.x);
        sum += 0.5*(sin(Q1*argZ) + 1.0);
    </string>
    <string name="stripe_final_sf">
        sum /= float(n) * pi;
        sum1 /= float(n - 1) * pi;
        float r = il*llr - il*log(0.5*log(modSqrSF(Z1)));
        float s = sum1 + (sum - sum1)*(r + 1.0);
        colorParams.z = s;
    </string>
    <string name="stripe_loop_df">
        sum1 = sum;
        argZ = atan(Y.x, X.x);
        sum += 0.5*(sin(Q1*argZ) + 1.0);
    </string>
    <string name="stripe_final_df">
        sum /= float(n);
        sum1 /= float(n - 1);
        float r = il*llr - il*log(0.5*log(modSqrSF(vec2(X1.x, Y1.x))));
        float s = sum1 + (sum - sum1)*(r + 1.0);
        colorParams.z = s;
    </string>


    <!-- MINMOD -->
    <string name="orbittrap_init">
        float minMod = R;
        float minX = R;
        float minY = R;
        float dist = 0.0;
        int m = 0;
    </string>
    <string name="orbittrap_loop_sf">
        dist = abs(Z.x);
        if(dist &lt; minX) {
            minX = dist;
            m = n;
        }
    </string>
    <string name="orbittrap_loop_df">
        dist = abs(X.x);
        if(dist &lt; minX) {
            minX = dist;
            m = n;
        }
    </string>
    <string name="orbittrap_final_radius">
        colorParams.z = minX;
    </string>
    <string name="orbittrap_final_iteration">
        colorParams.z = float(m)/float(maxIter);
    </string>


    <!-- OVERLAY -->
    <string name="overlay_init">
        float argZ;
        float sum, sum1 = 0.0;
        float il = 1.0/log(2.0);
        float llr = log(log(R)/2.0);
    </string>
    <string name="overlay_loop_sf">
        sum1 = sum;
        argZ = atan(Z.y, Z.x);
        sum += tan(Q1*argZ);
    </string>
    <string name="overlay_loop_df">
        sum1 = sum;
        argZ = atan(Y.x, X.x);
        sum += tan(Q1*argZ);
    </string>
    <string name="overlay_final_sf">
        sum /= float(n) * pi;
        sum1 /= float(n - 1) * pi;
        float r = il*llr - il*log(0.5*log(modSqrSF(Z1)));
        float s = sum1 + (sum - sum1)*(r + 1.0);
        colorParams.z = s;
    </string>
    <string name="overlay_final_df">
        sum /= float(n) * pi;
        sum1 /= float(n - 1) * pi;
        float r = il*llr - il*log(0.5*log(modSqrSF(vec2(X1.x, Y1.x))));
        float s = sum1 + (sum - sum1)*(r + 1.0);
        colorParams.z = s;
    </string>


</resources>
